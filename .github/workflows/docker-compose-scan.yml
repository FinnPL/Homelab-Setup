name: Docker Compose Image Metadata and CVE Scan

on:
  pull_request:
    paths:
      - '**/docker-compose*.yml'
      - '**/docker-compose*.yaml'

permissions:
  contents: read
  pull-requests: write

jobs:
  scan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Detect Changed docker-compose Files
        id: files
        run: |
          # Get the target branch of the pull request from the event payload.
          BASE_BRANCH=${{ github.event.pull_request.base.ref }}
          echo "Base branch is: $BASE_BRANCH"
          git fetch origin $BASE_BRANCH
          # Handle branches without a merge base
          if git merge-base --is-ancestor origin/$BASE_BRANCH HEAD; then
            CHANGED=$(git diff --name-only origin/$BASE_BRANCH...HEAD | grep -i 'docker-compose.*\.ya\?ml' || true)
          else
            CHANGED=$(git diff --name-only origin/$BASE_BRANCH HEAD | grep -i 'docker-compose.*\.ya\?ml' || true)
          fi
          echo "Changed docker-compose files:"
          echo "$CHANGED"
          echo "files<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGED" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
  
      - name: Prepare Empty Report File
        run: |
          echo "Docker Compose Image Metadata and CVE Report" > report.txt
          echo "=============================================" >> report.txt

      - name: Scan docker-compose Files for Images and CVEs
        if: steps.files.outputs.files != ''
        run: |
          # Loop over each changed docker-compose file.
          for file in $(echo "${{ steps.files.outputs.files }}"); do
            echo "Processing file: $file" >> report.txt
            # Extract image names (assuming docker-compose syntax "image: <imagename>")
            IMAGES=$(grep -oP 'image:\s*\K.+' "$file" | tr -d '"' )
            if [ -z "$IMAGES" ]; then
              echo "   No images found in $file" >> report.txt
              continue
            fi

            for image in $IMAGES; do
              echo "   Found image: $image" >> report.txt
              # Run Docker Scout to check for CVEs.
              echo "   Running docker scout cves $image ..." >> report.txt
              SCOUT_OUTPUT=$(docker scout cves "$image" 2>&1 || echo "   Error scanning $image")
              echo "$SCOUT_OUTPUT" >> report.txt
            done
            echo "---------------------------------------------" >> report.txt
          done
          # Display the final report.
          cat report.txt

      - name: Post PR Comment with the Report
        if: steps.files.outputs.files != ''
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('report.txt', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: "## Docker Compose Image Metadata and CVE Scan Report\n```\n" + report + "\n```"
            });
