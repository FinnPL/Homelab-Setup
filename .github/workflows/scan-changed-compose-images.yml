name: "Scan changed compose images (Trivy) and comment PR"

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    paths:
      - '**/docker-compose.yml'
      - '**/docker-compose.yaml'
      - '**/compose.yml'
      - '**/compose.yaml'

permissions:
  contents: read
  pull-requests: write

jobs:
  prepare:
    name: Prepare list of changed compose files & images
    runs-on: ubuntu-latest
    outputs:
      images: ${{ steps.get-images.outputs.images }}   # comma-separated
      files: ${{ steps.get-images.outputs.files }}
    steps:
      - name: Checkout (full history)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Fetch base branch for the PR
        if: ${{ github.event.pull_request.base.ref != '' }}
        run: |
          git fetch origin ${{ github.event.pull_request.base.ref }} --depth=1

      - name: List changed files
        id: changed
        run: |
          # find the base commit (FETCH_HEAD) and compare
          if [ -n "${{ github.event.pull_request.base.ref }}" ]; then
            BASE=FETCH_HEAD
          else
            BASE=${{ github.event.before }}
          fi
          CHANGED=$(git diff --name-only $BASE...HEAD || true)
          echo "changed_files<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGED" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Setup yq
        uses: mikefarah/yq@v4.44.1

      - name: Extract changed/added images from compose files
        id: get-images
        run: |
          CHANGED="${{ steps.changed.outputs.changed_files }}"
          IMGS=""
          FILES=""
          BASE=FETCH_HEAD
          
          echo "🔍 Analyzing changed compose files for image differences..."
          
          for f in $CHANGED; do
            # Only check files that are actually docker-compose files
            # Look for docker-compose.yml, docker-compose.yaml, or compose.yml/compose.yaml
            # Exclude .github/ directory files
            if [[ "$f" =~ ^\.github/ ]]; then
              echo "Skipping GitHub Actions file: $f"
              continue
            fi
            
            if [[ "$f" =~ (docker-)?compose\.ya?ml$ ]] || [[ "$f" == *"docker-compose"* && "$f" =~ \.ya?ml$ ]]; then
              echo "Processing compose file: $f"
              FILES="${FILES}${f},"
              
              # Get images from current version (HEAD)
              current_images=""
              if [ -f "$f" ]; then
                set +e
                current_images=$(yq e '.services[]? | .image // ""' "$f" 2>/dev/null | grep -v '^$' || true)
                set -e
              fi
              
              # Get images from base version
              base_images=""
              if git show "$BASE:$f" >/dev/null 2>&1; then
                set +e
                base_images=$(git show "$BASE:$f" | yq e '.services[]? | .image // ""' - 2>/dev/null | grep -v '^$' || true)
                set -e
              else
                echo "  → File is new (not in base branch)"
              fi
              
              # Compare images and find new/changed ones
              echo "  Current images in $f:"
              for img in $current_images; do
                if [ -n "$img" ] && [ "$img" != "null" ]; then
                  img_clean=$(echo "$img" | tr -d '"' | tr -d "'" | sed 's/[,:]$//')
                  echo "    - $img_clean"
                  
                  # Check if this image is new or changed
                  img_found=false
                  for base_img in $base_images; do
                    base_img_clean=$(echo "$base_img" | tr -d '"' | tr -d "'" | sed 's/[,:]$//')
                    if [ "$img_clean" = "$base_img_clean" ]; then
                      img_found=true
                      break
                    fi
                  done
                  
                  if [ "$img_found" = false ]; then
                    echo "    ✅ NEW/CHANGED: $img_clean"
                    IMGS="${IMGS}${img_clean}\n"
                  else
                    echo "    ⏭️  UNCHANGED: $img_clean"
                  fi
                fi
              done
              
              echo ""
            fi
          done
          
          # uniq and format output
          IMGS=$(echo -e "$IMGS" | sed '/^\s*$/d' | sort -u | tr '\n' ',' | sed 's/,$//')
          FILES=$(echo "$FILES" | sed 's/,$//')
          
          echo "📋 Summary:"
          echo "  Changed files: $FILES"
          echo "  New/changed images: $IMGS"
          
          echo "images=$IMGS" >> $GITHUB_OUTPUT
          echo "files=$FILES" >> $GITHUB_OUTPUT

  scan-and-comment:
    name: Scan images with Trivy and comment PR
    needs: prepare
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Trivy (setup action)
        uses: aquasecurity/setup-trivy@v0.2.0
        with:
          version: 'v0.65.0'
          cache: true

      - name: Setup helper env
        run: |
          echo "IMAGES=${{ needs.prepare.outputs.images }}" >> $GITHUB_ENV
          echo "FILES=${{ needs.prepare.outputs.files }}" >> $GITHUB_ENV
          # Set Trivy environment variables to reduce verbose output
          echo "TRIVY_QUIET=true" >> $GITHUB_ENV
          echo "TRIVY_NO_PROGRESS=true" >> $GITHUB_ENV
          echo "TRIVY_DISABLE_VEX_NOTICE=true" >> $GITHUB_ENV

      - name: Build report (scan each image)
        id: trivy_reports
        run: |
          set -euo pipefail
          images="${IMAGES:-}"
          files="${FILES:-}"
          
          if [ -z "$images" ] && [ -z "$files" ]; then
            echo "No Docker Compose files changed in this PR."
            echo "# Docker Image Vulnerability Report" > pr-trivy-report.md
            echo "" >> pr-trivy-report.md
            echo "No Docker Compose files were changed in this PR. Skipping vulnerability scan." >> pr-trivy-report.md
            echo "report_exists=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          if [ -z "$images" ]; then
            echo "No new or changed Docker images found in modified compose files."
            echo "# Docker Image Vulnerability Report" > pr-trivy-report.md
            echo "" >> pr-trivy-report.md
            echo "> [!TIP]" >> pr-trivy-report.md
            echo "> **Summary:** No new or changed images to scan. All images in the modified compose files remain unchanged from the base branch. 🎉" >> pr-trivy-report.md
            echo "" >> pr-trivy-report.md
            echo "**Changed compose files:** $files" >> pr-trivy-report.md
            echo "" >> pr-trivy-report.md
            echo "All Docker images in the changed compose files are identical to those in the base branch, so no vulnerability scanning is needed." >> pr-trivy-report.md
            echo "report_exists=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Start building the report
          echo "# Docker Image Vulnerability Report" > pr-trivy-report.md
          echo "" >> pr-trivy-report.md
          
          # We'll add the summary at the top later, after scanning
          echo "**Changed compose files:** $files" >> pr-trivy-report.md
          echo "" >> pr-trivy-report.md
          echo "**New/changed images being scanned:**" >> pr-trivy-report.md
          IFS=',' read -r -a img_array <<< "$images"
          for img in "${img_array[@]}"; do
            img_trimmed=$(echo "$img" | xargs)
            if [ -n "$img_trimmed" ]; then
              echo "- \`$img_trimmed\`" >> pr-trivy-report.md
            fi
          done
          echo "" >> pr-trivy-report.md

          IFS=',' read -r -a arr <<< "$images"
          total_vulnerabilities=0
          
          for img in "${arr[@]}"; do
            img_trimmed=$(echo "$img" | xargs)
            if [ -z "$img_trimmed" ]; then
              continue
            fi
            
            echo "🔍 Scanning image: $img_trimmed"
            
            # Add image header to report
            echo "" >> pr-trivy-report.md
            echo "---" >> pr-trivy-report.md
            echo "" >> pr-trivy-report.md
            echo "## \`$img_trimmed\`" >> pr-trivy-report.md
            echo "" >> pr-trivy-report.md
            
            # Run trivy scan
            scan_file="trivy-${img_trimmed//[:\/]/_}.txt"
            
            # Run trivy with quiet flags - environment variables should suppress most verbose output
            if trivy image --format table --severity CRITICAL,HIGH --exit-code 0 --quiet --no-progress "$img_trimmed" > "$scan_file" 2>&1; then
              if [ -s "$scan_file" ]; then
                # Check if there are actual vulnerability entries (lines with CRITICAL or HIGH)
                vuln_lines=$(grep -c -E "(CRITICAL|HIGH)" "$scan_file" 2>/dev/null || echo "0")
                
                if [ "$vuln_lines" -gt 0 ]; then
                  total_vulnerabilities=$((total_vulnerabilities + vuln_lines))
                  
                  # Show summary table first
                  if grep -q "Report Summary" "$scan_file"; then
                    echo "### 📊 Vulnerability Summary" >> pr-trivy-report.md
                    echo "" >> pr-trivy-report.md
                    echo "\`\`\`" >> pr-trivy-report.md
                    sed -n '/Report Summary/,/- .0.: Clean/p' "$scan_file" | sed '/Report Summary/d' >> pr-trivy-report.md
                    echo "\`\`\`" >> pr-trivy-report.md
                    echo "" >> pr-trivy-report.md
                  fi
                  
                  echo "### 🔍 Detailed Vulnerabilities" >> pr-trivy-report.md
                  echo "" >> pr-trivy-report.md
                  
                  # Parse the file and extract sections properly
                  skip_summary=true
                  current_section=""
                  in_section=false
                  
                  while IFS= read -r line; do
                    # Skip the entire summary section
                    if [[ "$line" =~ Report\ Summary ]] || [[ "$skip_summary" == true ]]; then
                      if [[ "$line" =~ -\ \'0\':\ Clean ]] || [[ "$line" =~ -\ \'-\':\ Not ]]; then
                        skip_summary=false
                      fi
                      continue
                    fi
                    
                    # Skip empty lines at the start and lines with '0': Clean
                    if [[ "$skip_summary" == false ]] && ([[ -z "$line" ]] || [[ "$line" =~ \'0\':\ Clean ]]); then
                      continue
                    fi
                    skip_summary=false
                    
                    # Detect section headers - specific patterns for target names
                    # Look for lines like "gcr.io/cadvisor/cadvisor:latest (alpine 3.18.6)" or "usr/bin/cadvisor (gobinary)"
                    if [[ "$line" =~ \([a-zA-Z0-9\._\ ]+\)$ ]] && [[ ! "$line" =~ ^Total: ]] && [[ ! "$line" =~ ^=+ ]] && [[ ! -z "$line" ]]; then
                      # Close previous section
                      if [[ "$in_section" == true ]]; then
                        echo "\`\`\`" >> pr-trivy-report.md
                        echo "" >> pr-trivy-report.md
                      fi
                      
                      # Start new section
                      echo "### $line" >> pr-trivy-report.md
                      echo "" >> pr-trivy-report.md
                      current_section="$line"
                      in_section=true
                      continue
                    fi
                    
                    # Handle Total: lines - extract and format nicely outside codeblock
                    if [[ "$line" =~ ^Total: ]] && [[ "$in_section" == true ]]; then
                      echo "**$line**" >> pr-trivy-report.md
                      echo "" >> pr-trivy-report.md
                      echo "\`\`\`" >> pr-trivy-report.md
                      continue
                    fi
                    
                    # Skip lines with just equals signs
                    if [[ "$line" =~ ^=+$ ]]; then
                      continue
                    fi
                    
                    # Add all other lines to the current section (tables, etc.)
                    if [[ "$in_section" == true ]]; then
                      echo "$line" >> pr-trivy-report.md
                    fi
                    
                  done < "$scan_file"
                  
                  # Close final section
                  if [[ "$in_section" == true ]]; then
                    echo "\`\`\`" >> pr-trivy-report.md
                  fi
                  
                else
                  echo "✅ No HIGH or CRITICAL vulnerabilities found." >> pr-trivy-report.md
                fi
              else
                echo "✅ No HIGH or CRITICAL vulnerabilities found." >> pr-trivy-report.md
              fi
            else
              echo "❌ Failed to scan image. Error:" >> pr-trivy-report.md
              echo "\`\`\`" >> pr-trivy-report.md
              cat "$scan_file" 2>/dev/null >> pr-trivy-report.md || echo "Unknown error occurred" >> pr-trivy-report.md
              echo "\`\`\`" >> pr-trivy-report.md
            fi
            
            # Generate JSON report for artifacts (silently)
            trivy image --format json --output "trivy-${img_trimmed//[:\/]/_}.json" --quiet --no-progress "$img_trimmed" >/dev/null 2>&1 || true
          done

          # Add summary with GitHub alerts at the top
          temp_file="temp_summary.md"
          
          # Create summary with appropriate GitHub alert
          if [ "$total_vulnerabilities" -eq 0 ]; then
            echo "> [!TIP]" > "$temp_file"
            echo "> **Summary:** No HIGH/CRITICAL vulnerabilities found across ${#arr[@]} image(s). 🎉" >> "$temp_file"
          elif [ "$total_vulnerabilities" -le 5 ]; then
            echo "> [!NOTE]" > "$temp_file"
            echo "> **Summary:** Found $total_vulnerabilities HIGH/CRITICAL vulnerabilities across ${#arr[@]} image(s)." >> "$temp_file"
          elif [ "$total_vulnerabilities" -le 20 ]; then
            echo "> [!WARNING]" > "$temp_file"
            echo "> **Summary:** Found $total_vulnerabilities HIGH/CRITICAL vulnerabilities across ${#arr[@]} image(s)." >> "$temp_file"
          else
            echo "> [!CAUTION]" > "$temp_file"
            echo "> **Summary:** Found $total_vulnerabilities HIGH/CRITICAL vulnerabilities across ${#arr[@]} image(s). Immediate attention required!" >> "$temp_file"
          fi
          echo "" >> "$temp_file"
          
          # Insert summary at the beginning of the report (after the title)
          sed -i '2r '"$temp_file" pr-trivy-report.md
          rm "$temp_file"

          echo "report_exists=true" >> $GITHUB_OUTPUT

      - name: Upload artifacts (full JSON reports)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: trivy-json-reports
          path: trivy-*.json
          retention-days: 7

      - name: Create or update PR comment with Trivy report
        if: steps.trivy_reports.outputs.report_exists == 'true'
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body-path: pr-trivy-report.md
          edit-mode: replace
