name: Docker Scout Scan

on:
  pull_request:

jobs:
  # First job: find images from docker-compose files and output a matrix JSON
  find-images:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install jq and yq
        run: |
          sudo apt-get update && sudo apt-get install -y jq
          # Install yq if not already installed
          if ! command -v yq &>/dev/null; then
            wget https://github.com/mikefarah/yq/releases/download/v4.25.1/yq_linux_amd64 -O /usr/local/bin/yq
            chmod +x /usr/local/bin/yq
          fi

      - name: Find images in Docker Compose files
        id: find
        run: |
          echo "Searching for docker-compose*.yml files..."
          files=$(find . -type f -name "docker-compose*.yml")
          echo "Found files:"
          echo "$files"
          images=()
          for file in $files; do
            echo "Processing $file"
            # Use yq to extract all image fields from services
            while IFS= read -r image; do
              if [[ -n "$image" ]]; then
                images+=("$image")
              fi
            done < <(yq e '.services[].image // empty' "$file")
          done
          # Remove duplicates (if any)
          unique_images=($(echo "${images[@]}" | tr ' ' '\n' | sort -u))
          echo "Unique images found: ${unique_images[@]}"
          # Create a JSON array for the matrix
          matrix=$(printf '%s\n' "${unique_images[@]}" | jq -R . | jq -s .)
          echo "Matrix JSON: $matrix"
          # Set the output for use in the next job
          echo "::set-output name=matrix::$matrix"

      - name: Set matrix output
        id: set-matrix
        run: echo "matrix=${{ steps.find.outputs.matrix }}" >> $GITHUB_OUTPUT

  # Second job: run Docker Scout scan for each image found
  scan-images:
    needs: find-images
    runs-on: ubuntu-latest
    strategy:
      matrix:
        image: ${{ fromJson(needs.find-images.outputs.matrix) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Scan image with Docker Scout
        id: scout
        uses: docker/scout-action@v1
        with:
          command: cves
          image: ${{ matrix.image }}
