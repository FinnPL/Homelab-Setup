name: Docker Scout PR Analysis

on:
  pull_request:
    types: [opened, synchronize, reopened]

# Set permissions to ensure we can create/update comments.
permissions:
  contents: read
  issues: write

jobs:
  scout:
    runs-on: ubuntu-latest
    steps:
      # 1. Check out the PR code.
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # 2. Ensure Docker (and Docker Scout) is available.
      #    (Docker Scout is integrated into the Docker CLI in recent versions.)
      - name: Set up Docker Scout
        run: |
          echo "Docker version:"
          docker --version
          echo "Docker Scout version:"
          docker scout version

      # 3. Find any changed docker-compose files.
      - name: Find changed docker-compose files
        id: find-files
        run: |
          # List changed files between the PR base and current HEAD
          CHANGED_FILES=$(git diff --name-only "${{ github.event.pull_request.base.sha }}" HEAD | grep -Ei 'docker-compose\.(ya?ml)' || true)
          echo "Found changed docker-compose files:"
          echo "$CHANGED_FILES"
          # Export as an output (if multiple files, they’ll be whitespace separated)
          echo "::set-output name=files::${CHANGED_FILES}"
      
      # 4. Analyze Docker images and CVEs from the changed files.
      - name: Analyze Docker images in docker-compose files
        id: analyze
        run: |
          # Initialize the Markdown output
          OUTPUT_FILE="docker-scout-results.md"
          echo "### Docker Scout Analysis" > $OUTPUT_FILE
          echo "" >> $OUTPUT_FILE
          echo "| Docker Image | Metadata | Open CVEs |" >> $OUTPUT_FILE
          echo "|--------------|----------|-----------|" >> $OUTPUT_FILE

          if [ -z "${{ steps.find-files.outputs.files }}" ]; then
            echo "No docker-compose files changed." >> $OUTPUT_FILE
          else
            for file in ${{ steps.find-files.outputs.files }}; do
              echo "Processing file: $file"
              # Extract lines that define an image (adjust the regex as needed)
              IMAGES=$(grep -E '^\s*image:' "$file" | awk '{print $2}')
              for image in $IMAGES; do
                echo "Scanning image: $image"

                # Use Docker Scout to inspect the image metadata.
                # (Assumes that “docker scout inspect” outputs JSON; adjust formatting as needed.)
                METADATA=$(docker scout inspect "$image" --format '{{json .}}' 2>/dev/null || echo '{}')
                # For demonstration, extract repository and tag (requires jq).
                SHORT_META=$(echo "$METADATA" | jq -r 'if .Repository and .Tag then "\(.Repository)@\(.Tag)" else "N/A" end' 2>/dev/null)

                # Get open CVEs (again, adjust the command/format as needed).
                CVES=$(docker scout cves "$image" 2>/dev/null || echo "None")
                # Remove newlines from CVES so the Markdown table stays intact.
                CVES=$(echo "$CVES" | tr '\n' ' ')

                # Append a row to the Markdown table.
                echo "| \`$image\` | $SHORT_META | $CVES |" >> $OUTPUT_FILE
              done
            done
          fi
          echo "Docker Scout Analysis:"
          cat $OUTPUT_FILE
          # Set the output so it can be used in the next step.
          echo "::set-output name=result::$(cat $OUTPUT_FILE)"

      # 5. Post the Markdown table as a comment on the PR.
      - name: Comment on PR with Docker Scout results
        uses: peter-evans/create-or-update-comment@v2
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ${{ steps.analyze.outputs.result }}
