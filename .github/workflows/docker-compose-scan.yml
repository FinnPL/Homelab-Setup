name: Docker Scout PR Analysis

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  issues: write

jobs:
  scout:
    runs-on: ubuntu-latest
    steps:
      # 1. Check out the PR code.
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # 2. Install Docker Scout.
      - name: Install Docker Scout
        run: |
          echo "Installing Docker Scout..."
          curl -fsSL https://raw.githubusercontent.com/docker/scout-cli/main/install.sh -o install-scout.sh
          sh install-scout.sh

      # 3. Verify Docker and Docker Scout versions.
      - name: Verify Installation
        run: |
          echo "Docker version:"
          docker --version
          echo "Docker Scout version:"
          docker scout version

      # 4. Find any changed docker-compose files.
      - name: Find changed docker-compose files
        id: find-files
        run: |
          CHANGED_FILES=$(git diff --name-only "${{ github.event.pull_request.base.sha }}" HEAD | grep -Ei 'docker-compose\.(ya?ml)' || true)
          echo "Found changed docker-compose files:"
          echo "$CHANGED_FILES"
          # Export files as an output (if multiple files, theyâ€™ll be whitespace separated)
          echo "::set-output name=files::${CHANGED_FILES}"

      # 5. Analyze Docker images and CVEs from the changed docker-compose files.
      - name: Analyze Docker images in docker-compose files
        id: analyze
        run: |
          OUTPUT_FILE="docker-scout-results.md"
          echo "### Docker Scout Analysis" > $OUTPUT_FILE
          echo "" >> $OUTPUT_FILE
          echo "| Docker Image | Metadata | Open CVEs |" >> $OUTPUT_FILE
          echo "|--------------|----------|-----------|" >> $OUTPUT_FILE

          if [ -z "${{ steps.find-files.outputs.files }}" ]; then
            echo "No docker-compose files changed." >> $OUTPUT_FILE
          else
            for file in ${{ steps.find-files.outputs.files }}; do
              echo "Processing file: $file"
              # Extract Docker image lines (adjust the regex if necessary)
              IMAGES=$(grep -E '^\s*image:' "$file" | awk '{print $2}')
              for image in $IMAGES; do
                echo "Scanning image: $image"
                # Retrieve image metadata (assuming Docker Scout outputs JSON)
                METADATA=$(docker scout inspect "$image" --format '{{json .}}' 2>/dev/null || echo '{}')
                # For demonstration, extract repository and tag (requires jq)
                SHORT_META=$(echo "$METADATA" | jq -r 'if .Repository and .Tag then "\(.Repository)@\(.Tag)" else "N/A" end' 2>/dev/null)

                # Get open CVEs for the image.
                CVES=$(docker scout cves "$image" 2>/dev/null || echo "None")
                # Remove newlines so the Markdown table remains intact.
                CVES=$(echo "$CVES" | tr '\n' ' ')

                # Append the results as a row in the Markdown table.
                echo "| \`$image\` | $SHORT_META | $CVES |" >> $OUTPUT_FILE
              done
            done
          fi

          echo "Docker Scout Analysis:"
          cat $OUTPUT_FILE
          # Set the output so it can be used in the next step.
          echo "::set-output name=result::$(cat $OUTPUT_FILE)"

      # 6. Post a PR comment with the Docker Scout analysis.
      - name: Comment on PR with Docker Scout results
        uses: peter-evans/create-or-update-comment@v2
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ${{ steps.analyze.outputs.result }}
